import math
import itertools

from bisect import insort

from graph import Graph
from graph.random import random_xy_graph


def lec_24_graph():
    """Sample from https://www.youtube.com/watch?v=-cLsEHP0qt0

    Lecture series on Advanced Operations Research by
    Prof. G.Srinivasan, Department of Management Studies, IIT Madras.
    For more details on NPTEL visit http://nptel.iitm.ac.in

    """
    return Graph(
        from_list=[
            (1, 2, 10),
            (1, 3, 8),
            (1, 4, 9),
            (1, 5, 7),
            (2, 1, 10),
            (2, 3, 10),
            (2, 4, 5),
            (2, 5, 6),
            (3, 1, 8),
            (3, 2, 10),
            (3, 4, 8),
            (3, 5, 9),
            (4, 1, 9),
            (4, 2, 5),
            (4, 3, 8),
            (4, 5, 6),
            (5, 1, 7),
            (5, 2, 6),
            (5, 3, 9),
            (5, 4, 6),
        ]
    )


def test_tsp_brute_force():
    """Generates all combinations of solutions"""
    g = lec_24_graph()
    L = []
    shortest_tour = float("inf")
    for tour in itertools.permutations(g.nodes(), len(g.nodes())):
        d = g.distance_from_path(tour + (tour[0],))
        if d <= shortest_tour:
            insort(L, (d, tour))  # solutions are inserted by ascending distance.
            shortest_tour = d

    solutions = set()
    p1 = L[0][1]  # first solution == shortest tour.
    for d, t in L:
        if d == shortest_tour:
            t_reverse = tuple(list(t)[::-1])
            if any(
                [
                    g.same_path(t, p1),  # same path just offset in sequence.
                    g.same_path(t_reverse, p1),
                ]  # same path reversed.
            ):
                solutions.add(t)
            else:
                raise AssertionError
    return solutions


lec_24_tsp_path = [1, 3, 4, 2, 5]
lec_24_valid_solutions = test_tsp_brute_force()
assert tuple(lec_24_tsp_path) in lec_24_valid_solutions


def test_greedy():
    g = lec_24_graph()
    d, tour = g.solve_tsp(method="greedy")
    assert tuple(tour) in lec_24_valid_solutions
    assert g.same_path(tour, lec_24_tsp_path)


def test_branch_and_bound():
    g = lec_24_graph()
    d, tour = g.solve_tsp(method="bnb")
    assert d == 34
    assert tuple(tour) in lec_24_valid_solutions


def test_bnb():
    g = Graph(
        from_list=[
            ((755, 53), (282, 126), 478.60004178854814),
            ((755, 53), (559, 45), 196.16319736382766),
            ((755, 53), (693, 380), 332.8257802514703),
            ((755, 53), (26, 380), 798.9806005154318),
            ((755, 53), (229, 72), 526.3430440311718),
            ((755, 53), (655, 58), 100.12492197250393),
            ((282, 126), (559, 45), 288.60006930006097),
            ((282, 126), (655, 58), 379.14772846477666),
            ((282, 126), (229, 72), 75.66372975210778),
            ((282, 126), (755, 53), 478.60004178854814),
            ((282, 126), (26, 380), 360.6272313622475),
            ((282, 126), (693, 380), 483.15318481823135),
            ((655, 58), (559, 45), 96.87620966986684),
            ((655, 58), (26, 380), 706.6293229126569),
            ((655, 58), (693, 380), 324.2344830520036),
            ((655, 58), (755, 53), 100.12492197250393),
            ((655, 58), (282, 126), 379.14772846477666),
            ((655, 58), (229, 72), 426.2299848673249),
            ((559, 45), (26, 380), 629.5347488423495),
            ((559, 45), (655, 58), 96.87620966986684),
            ((559, 45), (693, 380), 360.8060420780118),
            ((559, 45), (755, 53), 196.16319736382766),
            ((559, 45), (229, 72), 331.1027030998086),
            ((559, 45), (282, 126), 288.60006930006097),
            ((26, 380), (229, 72), 368.8807395351511),
            ((26, 380), (693, 380), 667.0),
            ((26, 380), (655, 58), 706.6293229126569),
            ((26, 380), (282, 126), 360.6272313622475),
            ((26, 380), (755, 53), 798.9806005154318),
            ((26, 380), (559, 45), 629.5347488423495),
            ((229, 72), (693, 380), 556.9201019895044),
            ((229, 72), (755, 53), 526.3430440311718),
            ((229, 72), (655, 58), 426.2299848673249),
            ((229, 72), (559, 45), 331.1027030998086),
            ((229, 72), (26, 380), 368.8807395351511),
            ((229, 72), (282, 126), 75.66372975210778),
            ((693, 380), (755, 53), 332.8257802514703),
            ((693, 380), (229, 72), 556.9201019895044),
            ((693, 380), (282, 126), 483.15318481823135),
            ((693, 380), (26, 380), 667.0),
            ((693, 380), (559, 45), 360.8060420780118),
            ((693, 380), (655, 58), 324.2344830520036),
        ]
    )
    d1, tour1 = g.solve_tsp("bnb")
    d2, tour2 = g.solve_tsp("greedy")
    assert d1 == d2


def simplify(graph):
    """helper that simplifies the xy to mere node ids."""
    d = {}
    cnt = itertools.count(1)
    c2 = []
    for s, e, dst in graph.edges():
        if s not in d:
            d[s] = next(cnt)
        if e not in d:
            d[e] = next(cnt)
        c2.append((d[s], d[e], dst))

    g = Graph(from_list=c2)
    return g


def test_random_graph_3_bnb():
    from random import seed, randint

    for i in range(4, 12):
        s = randint(1, int(1e7))
        seed(s)
        g = random_xy_graph(i, x_max=800, y_max=400)  # a fully connected graph.
        g = simplify(g)
        d1, t1 = g.solve_tsp("bnb")
        d2, t2 = g.solve_tsp("greedy")
        assert d1 <= d2 or math.isclose(d1, d2), (d1, d2, g.edges())
        print(i, s, "|", round(100 * ((d2 - d1) / d1)), "% greedy dist excess rel to bnb dist")


def test_random_graph_4_bnb():
    # fmt:off
    c = [
        (1, 2, 467.8226159560908), (1, 3, 561.6021723604708), (1, 4, 138.88484438555562), (1, 5, 661.6358515074587), (1, 6, 654.3951405687545), (1, 7, 114.82595525402782),
        (1, 8, 276.99097458220547), (1, 9, 519.7172308092161), (1, 10, 186.52613757862463), (1, 11, 205.08047201037937), (2, 3, 96.87620966986684), (2, 10, 288.60006930006097),
        (2, 6, 360.8060420780118), (2, 1, 467.8226159560908), (2, 11, 384.9623358200124), (2, 4, 331.1027030998086), (2, 7, 526.7988230814492), (2, 8, 629.5347488423495),
        (2, 5, 196.16319736382766), (2, 9, 178.04493814764857), (3, 4, 426.2299848673249), (3, 8, 706.6293229126569), (3, 6, 324.2344830520036), (3, 11, 462.0140690498505),
        (3, 9, 166.67633305301626), (3, 7, 623.4163937530036), (3, 5, 100.12492197250393), (3, 10, 379.14772846477666), (3, 1, 561.6021723604708), (3, 2, 96.87620966986684),
        (4, 8, 368.8807395351511), (4, 10, 75.66372975210778), (4, 11, 187.2671887971836), (4, 6, 556.9201019895044), (4, 5, 526.3430440311718), (4, 3, 426.2299848673249), (4, 1, 138.88484438555562),
        (4, 7, 203.8430768998545), (4, 9, 402.9900743194552), (4, 2, 331.1027030998086), (5, 2, 196.16319736382766), (5, 10, 478.60004178854814), (5, 1, 661.6358515074587), (5, 8, 798.9806005154318),
        (5, 11, 555.6005759536251), (5, 4, 526.3430440311718), (5, 3, 100.12492197250393), (5, 7, 722.9474393066207), (5, 9, 222.25210910135362), (5, 6, 332.8257802514703),
        (6, 3, 324.2344830520036), (6, 7, 753.7214339528895), (6, 5, 332.8257802514703), (6, 8, 667.0), (6, 10, 483.15318481823135), (6, 2, 360.8060420780118), (6, 4, 556.9201019895044),
        (6, 1, 654.3951405687545), (6, 9, 185.23768515072737), (6, 11, 469.847847712427), (7, 3, 623.4163937530036), (7, 8, 364.0673014704836), (7, 6, 753.7214339528895),
        (7, 9, 606.2878854141818), (7, 4, 203.8430768998545), (7, 1, 114.82595525402782), (7, 10, 272.21498856602295), (7, 2, 526.7988230814492), (7, 5, 722.9474393066207),
        (7, 11, 318.56710439089596), (8, 6, 667.0), (8, 5, 798.9806005154318), (8, 2, 629.5347488423495), (8, 4, 368.8807395351511), (8, 10, 360.6272313622475),
        (8, 3, 706.6293229126569), (8, 11, 244.9693858423946), (8, 7, 364.0673014704836), (8, 1, 276.99097458220547), (8, 9, 601.5064421932653), (9, 11, 368.40195439221003),
        (9, 1, 519.7172308092161), (9, 6, 185.23768515072737), (9, 7, 606.2878854141818), (9, 2, 178.04493814764857), (9, 8, 601.5064421932653), (9, 10, 335.574134879314),
        (9, 5, 222.25210910135362), (9, 3, 166.67633305301626), (9, 4, 402.9900743194552), (10, 6, 483.15318481823135), (10, 3, 379.14772846477666), (10, 4, 75.66372975210778),
        (10, 5, 478.60004178854814), (10, 1, 186.52613757862463), (10, 8, 360.6272313622475), (10, 9, 335.574134879314), (10, 11, 139.77839604173457), (10, 7, 272.21498856602295),
        (10, 2, 288.60006930006097), (11, 4, 187.2671887971836), (11, 1, 205.08047201037937), (11, 8, 244.9693858423946), (11, 10, 139.77839604173457), (11, 9, 368.40195439221003),
        (11, 7, 318.56710439089596), (11, 5, 555.6005759536251), (11, 6, 469.847847712427), (11, 2, 384.9623358200124), (11, 3, 462.0140690498505),
    ]
    # fmt:on
    g = Graph(from_list=c)
    d1, t1 = g.solve_tsp("bnb")
    d2, t2 = g.solve_tsp("greedy")
    assert d1 <= d2 or math.isclose(d1, d2), (d1, d2, g.edges())
    print(round(100 * ((d2 - d1) / d1)), "% greedy dist / bnb dist")


def test_special_cyclic_search_problem():
    """
    TSP will run forever on this graph if the algorithm doesn't
    memoize results, as the graph constructs a special cycle where
    the results loop over 5 iterations.

    This is the core cycle of the infinite search loop:
    ...
    [..., '23,70', '24,80', '25,80', '26,80', '26,70', '23,40', '23,60', ...]  <-- this line
    [..., '23,70', '23,60', '23,40', '26,70', '26,80', '25,80', '24,80', ...]
    [..., '24,80', '25,80', '26,80', '26,70', '23,40', '23,60', '23,70', ...]      is the same
    [..., '23,60', '23,40', '26,70', '26,80', '25,80', '24,80', '23,70', ...]
    [..., '23,70', '24,80', '25,80', '26,80', '26,70', '23,40', '23,60', ...]  <-- as this line
    ...
    """
    # fmt:off
    edges = [
        ("0,0", "0,0", 0), ("0,0", "22,30", 24.00003787878788), ("0,0", "25,80", 32.00007157738095),("0,0", "22,20", 23.00002272727273), ("0,0", "26,80", 33.00006607142858), ("0,0", "26,70", 32.00006126373627), ("0,0", "23,40", 34.000078084415584), ("0,0", "23,60", 32.000078084415584), ("0,0", "23,70", 31.000078084415584), ("0,0", "24,80", 31.000071577380954), ("0,0", "24,70", 30.00006636904762), ("0,0", "12,80", 19.000143154761904), ("0,0", "12,70", 18.00013273809524), ("0,0", "12,60", 17.000120833333334), ("0,0", "12,40", 15.000090277777778), ("0,0", "12,30", 14.000069444444444), ("0,0", "12,20", 13.000041666666666), ("0,0", "13,20", 26.000143154761904), ("0,0", "13,40", 24.000143154761904), ("0,0", "13,50", 23.000143154761904), ("0,0", "10,50", 14.000128333333333), ("0,0", "10,30", 12.000083333333333), ("0,0", "10,20", 11.00005), ("0,0", "11,30", 23.000171785714286), ("0,0", "11,40", 22.000171785714286), ("0,0", "11,60", 20.000171785714286), ("0,0", "11,80", 18.000171785714286), ("22,30", "0,0", 34.000040205627705), ("22,30", "22,30", 0), ("22,30", "25,80", 8.000040205627705), ("22,30", "22,20", 15.000062932900432), ("22,30", "26,80", 9.000040205627705), ("22,30", "26,70", 22.000101469363972), ("22,30", "23,40", 10.000040205627705), ("22,30", "23,60", 8.000040205627705), ("22,30", "23,70", 7.000040205627705), ("22,30", "24,80", 7.000040205627705), ("22,30", "24,70", 20.000106574675325), ("22,30", "12,80", 15.000040205627705), ("22,30", "12,70", 28.000172943722944), ("22,30", "12,60", 27.00016103896104), ("22,30", "12,40", 25.000130483405485), ("22,30", "12,30", 24.00010965007215), ("22,30", "12,20", 23.000081872294373), ("22,30", "13,20", 20.000040205627705), ("22,30", "13,40", 18.000040205627705), ("22,30", "13,50", 17.000040205627705), ("22,30", "10,50", 28.000168538961038), ("22,30", "10,30", 26.000123538961038), ("22,30", "10,20", 25.000090205627707), ("22,30", "11,30", 21.000040205627705), ("22,30", "11,40", 20.000040205627705), ("22,30", "11,60", 18.000040205627705), ("22,30", "11,80", 16.000040205627705), ("25,80", "0,0", 32), ("25,80", "22,30", 12.000037878787879), ("25,80", "25,80", 0), ("25,80", "22,20", 11.000022727272727), ("25,80", "26,80", 1), ("25,80", "26,70", 14.000061263736264), ("25,80", "23,40", 6), ("25,80", "23,60", 4), ("25,80", "23,70", 3), ("25,80", "24,80", 1), ("25,80", "24,70", 14.00006636904762), ("25,80", "12,80", 13), ("25,80", "12,70", 26.00013273809524), ("25,80", "12,60", 25.000120833333334), ("25,80", "12,40", 23.00009027777778), ("25,80", "12,30", 22.000069444444446), ("25,80", "12,20", 21.000041666666668), ("25,80", "13,20", 18), ("25,80", "13,40", 16), ("25,80", "13,50", 15), ("25,80", "10,50", 26.000128333333333), ("25,80", "10,30", 24.000083333333333), ("25,80", "10,20", 23.00005), ("25,80", "11,30", 19), ("25,80", "11,40", 18), ("25,80", "11,60", 16), ("25,80", "11,80", 14), ("22,20", "0,0", 35.000055357142855), ("22,20", "22,30", 1.0000151515151514), ("22,20", "25,80", 9.000055357142857), ("22,20", "22,20", 0), ("22,20", "26,80", 10.000055357142857), ("22,20", "26,70", 23.000116620879123), ("22,20", "23,40", 11.000055357142857), ("22,20", "23,60", 9.000055357142857), ("22,20", "23,70", 8.000055357142857), ("22,20", "24,80", 8.000055357142857), ("22,20", "24,70", 21.000121726190475), ("22,20", "12,80", 16.000055357142855), ("22,20", "12,70", 29.000188095238094), ("22,20", "12,60", 28.00017619047619), ("22,20", "12,40", 26.000145634920635), ("22,20", "12,30", 25.000124801587305), ("22,20", "12,20", 24.000097023809523), ("22,20", "13,20", 21.000055357142855), ("22,20", "13,40", 19.000055357142855), ("22,20", "13,50", 18.000055357142855), ("22,20", "10,50", 29.00018369047619), ("22,20", "10,30", 27.00013869047619), ("22,20", "10,20", 26.000105357142857), ("22,20", "11,30", 22.000055357142855), ("22,20", "11,40", 21.000055357142855), ("22,20", "11,60", 19.000055357142855), ("22,20", "11,80", 17.000055357142855), ("26,80", "0,0", 33), ("26,80", "22,30", 13.000037878787879), ("26,80", "25,80", 1), ("26,80", "22,20", 12.000022727272727), ("26,80", "26,80", 0), ("26,80", "26,70", 15.000061263736264), ("26,80", "23,40", 7), ("26,80", "23,60", 5), ("26,80", "23,70", 4), ("26,80", "24,80", 2), ("26,80", "24,70", 15.00006636904762), ("26,80", "12,80", 14), ("26,80", "12,70", 27.00013273809524), ("26,80", "12,60", 26.000120833333334), ("26,80", "12,40", 24.00009027777778), ("26,80", "12,30", 23.000069444444446), ("26,80", "12,20", 22.000041666666668), ("26,80", "13,20", 19), ("26,80", "13,40", 17), ("26,80", "13,50", 16), ("26,80", "10,50", 27.000128333333333), ("26,80", "10,30", 25.000083333333333), ("26,80", "10,20", 24.00005), ("26,80", "11,30", 20), ("26,80", "11,40", 19), ("26,80", "11,60", 17), ("26,80", "11,80", 15), ("26,70", "0,0", 34.00000480769231), ("26,70", "22,30", 14.000042686480187), ("26,70", "25,80", 2.0000048076923074), ("26,70", "22,20", 13.000027534965035), ("26,70", "26,80", 1.0000048076923076), ("26,70", "26,70", 0), ("26,70", "23,40", 8.000004807692308), ("26,70", "23,60", 6.000004807692307), ("26,70", "23,70", 5.000004807692307), ("26,70", "24,80", 3.0000048076923074), ("26,70", "24,70", 16.000071176739926), ("26,70", "12,80", 15.000004807692308), ("26,70", "12,70", 28.000137545787545), ("26,70", "12,60", 27.00012564102564), ("26,70", "12,40", 25.000095085470086), ("26,70", "12,30", 24.000074252136752), ("26,70", "12,20", 23.000046474358975), ("26,70", "13,20", 20.000004807692306), ("26,70", "13,40", 18.000004807692306), ("26,70", "13,50", 17.000004807692306), ("26,70", "10,50", 28.00013314102564), ("26,70", "10,30", 26.00008814102564), ("26,70", "10,20", 25.000054807692308), ("26,70", "11,30", 21.000004807692306), ("26,70", "11,40", 20.000004807692306), ("26,70", "11,60", 18.000004807692306), ("26,70", "11,80", 16.000004807692306), ("23,40", "0,0", 26), ("23,40", "22,30", 6.000037878787879), ("23,40", "25,80", 12.000071577380952), ("23,40", "22,20", 5.000022727272727), ("23,40", "26,80", 13.000066071428572), ("23,40", "26,70", 12.000061263736264), ("23,40", "23,40", 0), ("23,40", "23,60", 14.000071577380952), ("23,40", "23,70", 13.000071577380952), ("23,40", "24,80", 11.000071577380952), ("23,40", "24,70", 10.00006636904762), ("23,40", "12,80", 21.000078084415584), ("23,40", "12,70", 20.00013273809524), ("23,40", "12,60", 19.000120833333334), ("23,40", "12,40", 17.00009027777778), ("23,40", "12,30", 16.000069444444446), ("23,40", "12,20", 15.000041666666666), ("23,40", "13,20", 26.000078084415584), ("23,40", "13,40", 24.000078084415584), ("23,40", "13,50", 23.000078084415584), ("23,40", "10,50", 20.000128333333333), ("23,40", "10,30", 18.000083333333333), ("23,40", "10,20", 17.00005), ("23,40", "11,30", 27.000078084415584), ("23,40", "11,40", 26.000078084415584), ("23,40", "11,60", 24.000078084415584), ("23,40", "11,80", 22.000078084415584), ("23,60", "0,0", 28), ("23,60", "22,30", 8.000037878787879), ("23,60", "25,80", 14.000071577380952), ("23,60", "22,20", 7.000022727272727), ("23,60", "26,80", 15.000066071428572), ("23,60", "26,70", 14.000061263736264), ("23,60", "23,40", 2), ("23,60", "23,60", 0), ("23,60", "23,70", 15.000071577380952), ("23,60", "24,80", 13.000071577380952), ("23,60", "24,70", 12.00006636904762), ("23,60", "12,80", 23.000078084415584), ("23,60", "12,70", 22.00013273809524), ("23,60", "12,60", 21.000120833333334), ("23,60", "12,40", 19.00009027777778), ("23,60", "12,30", 18.000069444444446), ("23,60", "12,20", 17.000041666666668), ("23,60", "13,20", 28.000078084415584), ("23,60", "13,40", 26.000078084415584), ("23,60", "13,50", 25.000078084415584), ("23,60", "10,50", 22.000128333333333), ("23,60", "10,30", 20.000083333333333), ("23,60", "10,20", 19.00005), ("23,60", "11,30", 29.000078084415584), ("23,60", "11,40", 28.000078084415584), ("23,60", "11,60", 26.000078084415584), ("23,60", "11,80", 24.000078084415584), ("23,70", "0,0", 29), ("23,70", "22,30", 9.000037878787879), ("23,70", "25,80", 15.000071577380952), ("23,70", "22,20", 8.000022727272727), ("23,70", "26,80", 16.00006607142857), ("23,70", "26,70", 15.000061263736264), ("23,70", "23,40", 3), ("23,70", "23,60", 1), ("23,70", "23,70", 0), ("23,70", "24,80", 14.000071577380952), ("23,70", "24,70", 13.00006636904762), ("23,70", "12,80", 24.000078084415584), ("23,70", "12,70", 23.00013273809524), ("23,70", "12,60", 22.000120833333334), ("23,70", "12,40", 20.00009027777778), ("23,70", "12,30", 19.000069444444446), ("23,70", "12,20", 18.000041666666668), ("23,70", "13,20", 29.000078084415584), ("23,70", "13,40", 27.000078084415584), ("23,70", "13,50", 26.000078084415584), ("23,70", "10,50", 23.000128333333333), ("23,70", "10,30", 21.000083333333333), ("23,70", "10,20", 20.00005), ("23,70", "11,30", 30.000078084415584), ("23,70", "11,40", 29.000078084415584), ("23,70", "11,60", 27.000078084415584), ("23,70", "11,80", 25.000078084415584), ("24,80", "0,0", 31), ("24,80", "22,30", 11.000037878787879), ("24,80", "25,80", 1), ("24,80", "22,20", 10.000022727272727), ("24,80", "26,80", 2), ("24,80", "26,70", 15.000061263736264), ("24,80", "23,40", 5), ("24,80", "23,60", 3), ("24,80", "23,70", 2), ("24,80", "24,80", 0), ("24,80", "24,70", 15.00006636904762), ("24,80", "12,80", 12), ("24,80", "12,70", 25.00013273809524), ("24,80", "12,60", 24.000120833333334), ("24,80", "12,40", 22.00009027777778), ("24,80", "12,30", 21.000069444444446), ("24,80", "12,20", 20.000041666666668), ("24,80", "13,20", 17), ("24,80", "13,40", 15), ("24,80", "13,50", 14), ("24,80", "10,50", 25.000128333333333), ("24,80", "10,30", 23.000083333333333), ("24,80", "10,20", 22.00005), ("24,80", "11,30", 18), ("24,80", "11,40", 17), ("24,80", "11,60", 15), ("24,80", "11,80", 13), ("24,70", "0,0", 32.000005208333334), ("24,70", "22,30", 12.000043087121211), ("24,70", "25,80", 2.0000052083333335), ("24,70", "22,20", 11.00002793560606), ("24,70", "26,80", 3.0000052083333335), ("24,70", "26,70", 16.000066472069598), ("24,70", "23,40", 6.0000052083333335), ("24,70", "23,60", 4.0000052083333335), ("24,70", "23,70", 3.0000052083333335), ("24,70", "24,80", 1.0000052083333333), ("24,70", "24,70", 0), ("24,70", "12,80", 13.000005208333333), ("24,70", "12,70", 26.000137946428573), ("24,70", "12,60", 25.000126041666668), ("24,70", "12,40", 23.000095486111114), ("24,70", "12,30", 22.00007465277778), ("24,70", "12,20", 21.000046875000002), ("24,70", "13,20", 18.000005208333334), ("24,70", "13,40", 16.000005208333334), ("24,70", "13,50", 15.000005208333333), ("24,70", "10,50", 26.000133541666667), ("24,70", "10,30", 24.000088541666667), ("24,70", "10,20", 23.000055208333336), ("24,70", "11,30", 19.000005208333334), ("24,70", "11,40", 18.000005208333334), ("24,70", "11,60", 16.000005208333334), ("24,70", "11,80", 14.000005208333333), ("12,80", "0,0", 19), ("12,80", "22,30", 19.00003787878788), ("12,80", "25,80", 13), ("12,80", "22,20", 18.00002272727273), ("12,80", "26,80", 14), ("12,80", "26,70", 27.000061263736267), ("12,80", "23,40", 15), ("12,80", "23,60", 13), ("12,80", "23,70", 12), ("12,80", "24,80", 12), ("12,80", "24,70", 25.00006636904762), ("12,80", "12,80", 0), ("12,80", "12,70", 15.000132738095239), ("12,80", "12,60", 14.000120833333334), ("12,80", "12,40", 12.000090277777778), ("12,80", "12,30", 11.000069444444444), ("12,80", "12,20", 10.000041666666666), ("12,80", "13,20", 7), ("12,80", "13,40", 5), ("12,80", "13,50", 4), ("12,80", "10,50", 13.000128333333333), ("12,80", "10,30", 11.000083333333333), ("12,80", "10,20", 10.00005), ("12,80", "11,30", 6), ("12,80", "11,40", 5), ("12,80", "11,60", 3), ("12,80", "11,80", 1), ("12,70", "0,0", 20.000010416666665), ("12,70", "22,30", 20.000048295454548), ("12,70", "25,80", 14.000010416666667), ("12,70", "22,20", 19.000033143939397), ("12,70", "26,80", 15.000010416666667), ("12,70", "26,70", 28.000071680402936), ("12,70", "23,40", 16.00001041666667), ("12,70", "23,60", 14.000010416666667), ("12,70", "23,70", 13.000010416666667), ("12,70", "24,80", 13.000010416666667), ("12,70", "24,70", 26.00007678571429), ("12,70", "12,80", 1.0000104166666666), ("12,70", "12,70", 0), ("12,70", "12,60", 15.00013125), ("12,70", "12,40", 13.000100694444445), ("12,70", "12,30", 12.00007986111111), ("12,70", "12,20", 11.000052083333333), ("12,70", "13,20", 8.000010416666667), ("12,70", "13,40", 6.000010416666667), ("12,70", "13,50", 5.000010416666667), ("12,70", "10,50", 14.00013875), ("12,70", "10,30", 12.00009375), ("12,70", "10,20", 11.000060416666667), ("12,70", "11,30", 7.000010416666667), ("12,70", "11,40", 6.000010416666667), ("12,70", "11,60", 4.000010416666667), ("12,70", "11,80", 2.0000104166666666), ("12,60", "0,0", 21.00002232142857), ("12,60", "22,30", 21.00006020021645), ("12,60", "25,80", 15.00002232142857), ("12,60", "22,20", 20.0000450487013), ("12,60", "26,80", 16.00002232142857), ("12,60", "26,70", 29.000083585164838), ("12,60", "23,40", 17.00002232142857), ("12,60", "23,60", 15.00002232142857), ("12,60", "23,70", 14.00002232142857), ("12,60", "24,80", 14.00002232142857), ("12,60", "24,70", 27.00008869047619), ("12,60", "12,80", 2.0000223214285713), ("12,60", "12,70", 1.0000119047619047), ("12,60", "12,60", 0), ("12,60", "12,40", 14.00011259920635), ("12,60", "12,30", 13.000091765873016), ("12,60", "12,20", 12.000063988095238), ("12,60", "13,20", 9.00002232142857), ("12,60", "13,40", 7.000022321428571), ("12,60", "13,50", 6.000022321428571), ("12,60", "10,50", 15.000150654761903), ("12,60", "10,30", 13.000105654761903), ("12,60", "10,20", 12.000072321428572), ("12,60", "11,30", 8.00002232142857), ("12,60", "11,40", 7.000022321428571), ("12,60", "11,60", 5.000022321428571), ("12,60", "11,80", 3.0000223214285713), ("12,40", "0,0", 23.000052876984128), ("12,40", "22,30", 23.000090755772007), ("12,40", "25,80", 17.000052876984128), ("12,40", "22,20", 22.000075604256857), ("12,40", "26,80", 18.000052876984128), ("12,40", "26,70", 31.000114140720395), ("12,40", "23,40", 19.000052876984128), ("12,40", "23,60", 17.000052876984128), ("12,40", "23,70", 16.000052876984128), ("12,40", "24,80", 16.000052876984128), ("12,40", "24,70", 29.000119246031748), ("12,40", "12,80", 4.000052876984127), ("12,40", "12,70", 3.0000424603174607), ("12,40", "12,60", 2.000030555555556), ("12,40", "12,40", 0), ("12,40", "12,30", 15.00012232142857), ("12,40", "12,20", 14.000094543650793), ("12,40", "13,20", 11.000052876984128), ("12,40", "13,40", 9.000052876984128), ("12,40", "13,50", 8.000052876984128), ("12,40", "10,50", 17.00018121031746), ("12,40", "10,30", 15.00013621031746), ("12,40", "10,20", 14.000102876984126), ("12,40", "11,30", 10.000052876984128), ("12,40", "11,40", 9.000052876984128), ("12,40", "11,60", 7.000052876984127), ("12,40", "11,80", 5.000052876984127), ("12,30", "0,0", 24.00007371031746), ("12,30", "22,30", 24.000111589105337), ("12,30", "25,80", 18.00007371031746), ("12,30", "22,20", 23.000096437590187), ("12,30", "26,80", 19.00007371031746), ("12,30", "26,70", 32.00013497405373), ("12,30", "23,40", 20.00007371031746), ("12,30", "23,60", 18.00007371031746), ("12,30", "23,70", 17.00007371031746), ("12,30", "24,80", 17.00007371031746), ("12,30", "24,70", 30.000140079365078), ("12,30", "12,80", 5.00007371031746), ("12,30", "12,70", 4.000063293650793), ("12,30", "12,60", 3.000051388888889), ("12,30", "12,40", 1.0000208333333334), ("12,30", "12,30", 0), ("12,30", "12,20", 15.000115376984127), ("12,30", "13,20", 12.00007371031746), ("12,30", "13,40", 10.00007371031746), ("12,30", "13,50", 9.00007371031746), ("12,30", "10,50", 18.000202043650795), ("12,30", "10,30", 16.000157043650795), ("12,30", "10,20", 15.00012371031746), ("12,30", "11,30", 11.00007371031746), ("12,30", "11,40", 10.00007371031746), ("12,30", "11,60", 8.00007371031746), ("12,30", "11,80", 6.00007371031746), ("12,20", "0,0", 25.00010148809524), ("12,20", "22,30", 25.00013936688312), ("12,20", "25,80", 19.00010148809524), ("12,20", "22,20", 24.00012421536797), ("12,20", "26,80", 20.00010148809524), ("12,20", "26,70", 33.0001627518315), ("12,20", "23,40", 21.00010148809524), ("12,20", "23,60", 19.00010148809524), ("12,20", "23,70", 18.00010148809524), ("12,20", "24,80", 18.00010148809524), ("12,20", "24,70", 31.00016785714286), ("12,20", "12,80", 6.000101488095238), ("12,20", "12,70", 5.000091071428571), ("12,20", "12,60", 4.000079166666667), ("12,20", "12,40", 2.000048611111111), ("12,20", "12,30", 1.0000277777777777), ("12,20", "12,20", 0), ("12,20", "13,20", 13.000101488095238), ("12,20", "13,40", 11.000101488095238), ("12,20", "13,50", 10.000101488095238), ("12,20", "10,50", 19.00022982142857), ("12,20", "10,30", 17.00018482142857), ("12,20", "10,20", 16.000151488095238), ("12,20", "11,30", 12.000101488095238), ("12,20", "11,40", 11.000101488095238), ("12,20", "11,60", 9.000101488095238), ("12,20", "11,80", 7.000101488095238), ("13,20", "0,0", 14), ("13,20", "22,30", 12.000037878787879), ("13,20", "25,80", 20.000071577380954), ("13,20", "22,20", 11.000022727272727), ("13,20", "26,80", 21.000066071428574), ("13,20", "26,70", 20.000061263736267), ("13,20", "23,40", 22.000078084415584), ("13,20", "23,60", 20.000078084415584), ("13,20", "23,70", 19.000078084415584), ("13,20", "24,80", 19.000071577380954), ("13,20", "24,70", 18.00006636904762), ("13,20", "12,80", 9.000143154761906), ("13,20", "12,70", 8.000132738095239), ("13,20", "12,60", 7.000120833333334), ("13,20", "12,40", 5.000090277777778), ("13,20", "12,30", 4.000069444444445), ("13,20", "12,20", 3.0000416666666667), ("13,20", "13,20", 0), ("13,20", "13,40", 14.000122704081633), ("13,20", "13,50", 13.000122704081633), ("13,20", "10,50", 8.000128333333333), ("13,20", "10,30", 6.000083333333333), ("13,20", "10,20", 5.00005), ("13,20", "11,30", 15.000143154761906), ("13,20", "11,40", 14.000143154761906), ("13,20", "11,60", 12.000143154761906), ("13,20", "11,80", 10.000143154761906), ("13,40", "0,0", 16), ("13,40", "22,30", 14.000037878787879), ("13,40", "25,80", 22.000071577380954), ("13,40", "22,20", 13.000022727272727), ("13,40", "26,80", 23.000066071428574), ("13,40", "26,70", 22.000061263736267), ("13,40", "23,40", 24.000078084415584), ("13,40", "23,60", 22.000078084415584), ("13,40", "23,70", 21.000078084415584), ("13,40", "24,80", 21.000071577380954), ("13,40", "24,70", 20.00006636904762), ("13,40", "12,80", 11.000143154761906), ("13,40", "12,70", 10.000132738095239), ("13,40", "12,60", 9.000120833333334), ("13,40", "12,40", 7.000090277777778), ("13,40", "12,30", 6.000069444444445), ("13,40", "12,20", 5.000041666666666), ("13,40", "13,20", 2), ("13,40", "13,40", 0), ("13,40", "13,50", 15.000122704081633), ("13,40", "10,50", 10.000128333333333), ("13,40", "10,30", 8.000083333333333), ("13,40", "10,20", 7.00005), ("13,40", "11,30", 17.000143154761908), ("13,40", "11,40", 16.000143154761908), ("13,40", "11,60", 14.000143154761906), ("13,40", "11,80", 12.000143154761906), ("13,50", "0,0", 17), ("13,50", "22,30", 15.000037878787879), ("13,50", "25,80", 23.000071577380954), ("13,50", "22,20", 14.000022727272727), ("13,50", "26,80", 24.000066071428574), ("13,50", "26,70", 23.000061263736267), ("13,50", "23,40", 25.000078084415584), ("13,50", "23,60", 23.000078084415584), ("13,50", "23,70", 22.000078084415584), ("13,50", "24,80", 22.000071577380954), ("13,50", "24,70", 21.00006636904762), ("13,50", "12,80", 12.000143154761906), ("13,50", "12,70", 11.000132738095239), ("13,50", "12,60", 10.000120833333334), ("13,50", "12,40", 8.000090277777778), ("13,50", "12,30", 7.000069444444445), ("13,50", "12,20", 6.000041666666666), ("13,50", "13,20", 3), ("13,50", "13,40", 1), ("13,50", "13,50", 0), ("13,50", "10,50", 11.000128333333333), ("13,50", "10,30", 9.000083333333333), ("13,50", "10,20", 8.00005), ("13,50", "11,30", 18.000143154761908), ("13,50", "11,40", 17.000143154761908), ("13,50", "11,60", 15.000143154761906), ("13,50", "11,80", 13.000143154761906), ("10,50", "0,0", 20.000043452380954), ("10,50", "22,30", 24.00008133116883), ("10,50", "25,80", 18.00004345238095), ("10,50", "22,20", 23.00006617965368), ("10,50", "26,80", 19.00004345238095), ("10,50", "26,70", 32.00010471611722), ("10,50", "23,40", 20.00004345238095), ("10,50", "23,60", 18.00004345238095), ("10,50", "23,70", 17.00004345238095), ("10,50", "24,80", 17.00004345238095), ("10,50", "24,70", 30.00010982142857), ("10,50", "12,80", 5.000043452380952), ("10,50", "12,70", 18.000176190476193), ("10,50", "12,60", 17.000164285714288), ("10,50", "12,40", 15.00013373015873), ("10,50", "12,30", 14.000112896825396), ("10,50", "12,20", 13.000085119047618), ("10,50", "13,20", 12.000043452380952), ("10,50", "13,40", 10.000043452380952), ("10,50", "13,50", 9.000043452380952), ("10,50", "10,50", 0), ("10,50", "10,30", 14.000126785714285), ("10,50", "10,20", 13.000093452380952), ("10,50", "11,30", 9.000043452380952), ("10,50", "11,40", 8.000043452380952), ("10,50", "11,60", 6.000043452380952), ("10,50", "11,80", 4.000043452380952), ("10,30", "0,0", 22.00008845238095), ("10,30", "22,30", 26.00012633116883), ("10,30", "25,80", 20.00008845238095), ("10,30", "22,20", 25.00011117965368), ("10,30", "26,80", 21.00008845238095), ("10,30", "26,70", 34.000149716117214), ("10,30", "23,40", 22.00008845238095), ("10,30", "23,60", 20.00008845238095), ("10,30", "23,70", 19.00008845238095), ("10,30", "24,80", 19.00008845238095), ("10,30", "24,70", 32.000154821428566), ("10,30", "12,80", 7.000088452380952), ("10,30", "12,70", 20.000221190476193), ("10,30", "12,60", 19.000209285714288), ("10,30", "12,40", 17.00017873015873), ("10,30", "12,30", 16.000157896825396), ("10,30", "12,20", 15.000130119047618), ("10,30", "13,20", 14.000088452380952), ("10,30", "13,40", 12.000088452380952), ("10,30", "13,50", 11.000088452380952), ("10,30", "10,50", 2.000045), ("10,30", "10,30", 0), ("10,30", "10,20", 15.000138452380952), ("10,30", "11,30", 11.000088452380952), ("10,30", "11,40", 10.000088452380952), ("10,30", "11,60", 8.000088452380952), ("10,30", "11,80", 6.000088452380952), ("10,20", "0,0", 23.000121785714285), ("10,20", "22,30", 27.000159664502164), ("10,20", "25,80", 21.000121785714285), ("10,20", "22,20", 26.000144512987013), ("10,20", "26,80", 22.000121785714285), ("10,20", "26,70", 35.00018304945055), ("10,20", "23,40", 23.000121785714285), ("10,20", "23,60", 21.000121785714285), ("10,20", "23,70", 20.000121785714285), ("10,20", "24,80", 20.000121785714285), ("10,20", "24,70", 33.00018815476191), ("10,20", "12,80", 8.000121785714287), ("10,20", "12,70", 21.000254523809527), ("10,20", "12,60", 20.000242619047622), ("10,20", "12,40", 18.000212063492064), ("10,20", "12,30", 17.00019123015873), ("10,20", "12,20", 16.000163452380953), ("10,20", "13,20", 15.000121785714287), ("10,20", "13,40", 13.000121785714287), ("10,20", "13,50", 12.000121785714287), ("10,20", "10,50", 3.0000783333333336), ("10,20", "10,30", 1.0000333333333333), ("10,20", "10,20", 0), ("10,20", "11,30", 12.000121785714287), ("10,20", "11,40", 11.000121785714287), ("10,20", "11,60", 9.000121785714287), ("10,20", "11,80", 7.000121785714287), ("11,30", "0,0", 13), ("11,30", "22,30", 15.000037878787879), ("11,30", "25,80", 23.000071577380954), ("11,30", "22,20", 14.000022727272727), ("11,30", "26,80", 24.000066071428574), ("11,30", "26,70", 23.000061263736267), ("11,30", "23,40", 25.000078084415584), ("11,30", "23,60", 23.000078084415584), ("11,30", "23,70", 22.000078084415584), ("11,30", "24,80", 22.000071577380954), ("11,30", "24,70", 21.00006636904762), ("11,30", "12,80", 10.000143154761904), ("11,30", "12,70", 9.000132738095237), ("11,30", "12,60", 8.000120833333332), ("11,30", "12,40", 6.000090277777777), ("11,30", "12,30", 5.000069444444444), ("11,30", "12,20", 4.000041666666666), ("11,30", "13,20", 17.000143154761904), ("11,30", "13,40", 15.000143154761904), ("11,30", "13,50", 14.000143154761904), ("11,30", "10,50", 7.0001283333333335), ("11,30", "10,30", 5.000083333333333), ("11,30", "10,20", 4.00005), ("11,30", "11,30", 0), ("11,30", "11,40", 15.000143154761904), ("11,30", "11,60", 13.000143154761904), ("11,30", "11,80", 11.000143154761904), ("11,40", "0,0", 14), ("11,40", "22,30", 16.00003787878788), ("11,40", "25,80", 24.000071577380954), ("11,40", "22,20", 15.000022727272727), ("11,40", "26,80", 25.000066071428574), ("11,40", "26,70", 24.000061263736267), ("11,40", "23,40", 26.000078084415584), ("11,40", "23,60", 24.000078084415584), ("11,40", "23,70", 23.000078084415584), ("11,40", "24,80", 23.000071577380954), ("11,40", "24,70", 22.00006636904762), ("11,40", "12,80", 11.000143154761904), ("11,40", "12,70", 10.000132738095237), ("11,40", "12,60", 9.000120833333332), ("11,40", "12,40", 7.000090277777777), ("11,40", "12,30", 6.000069444444444), ("11,40", "12,20", 5.000041666666666), ("11,40", "13,20", 18.000143154761904), ("11,40", "13,40", 16.000143154761904), ("11,40", "13,50", 15.000143154761904), ("11,40", "10,50", 8.000128333333333), ("11,40", "10,30", 6.000083333333333), ("11,40", "10,20", 5.00005), ("11,40", "11,30", 1), ("11,40", "11,40", 0), ("11,40", "11,60", 14.000143154761904), ("11,40", "11,80", 12.000143154761904), ("11,60", "0,0", 16), ("11,60", "22,30", 18.00003787878788), ("11,60", "25,80", 26.000071577380954), ("11,60", "22,20", 17.00002272727273), ("11,60", "26,80", 27.000066071428574), ("11,60", "26,70", 26.000061263736267), ("11,60", "23,40", 28.000078084415584), ("11,60", "23,60", 26.000078084415584), ("11,60", "23,70", 25.000078084415584), ("11,60", "24,80", 25.000071577380954), ("11,60", "24,70", 24.00006636904762), ("11,60", "12,80", 13.000143154761906), ("11,60", "12,70", 12.000132738095239), ("11,60", "12,60", 11.000120833333334), ("11,60", "12,40", 9.000090277777778), ("11,60", "12,30", 8.000069444444444), ("11,60", "12,20", 7.000041666666666), ("11,60", "13,20", 20.000143154761908), ("11,60", "13,40", 18.000143154761908), ("11,60", "13,50", 17.000143154761908), ("11,60", "10,50", 10.000128333333333), ("11,60", "10,30", 8.000083333333333), ("11,60", "10,20", 7.00005), ("11,60", "11,30", 3), ("11,60", "11,40", 2), ("11,60", "11,60", 0), ("11,60", "11,80", 14.000143154761906), ("11,80", "0,0", 18), ("11,80", "22,30", 20.00003787878788), ("11,80", "25,80", 14), ("11,80", "22,20", 19.00002272727273), ("11,80", "26,80", 15), ("11,80", "26,70", 28.000061263736267), ("11,80", "23,40", 16), ("11,80", "23,60", 14), ("11,80", "23,70", 13), ("11,80", "24,80", 13), ("11,80", "24,70", 26.00006636904762), ("11,80", "12,80", 1), ("11,80", "12,70", 14.000132738095239), ("11,80", "12,60", 13.000120833333334), ("11,80", "12,40", 11.000090277777778), ("11,80", "12,30", 10.000069444444444), ("11,80", "12,20", 9.000041666666666), ("11,80", "13,20", 8), ("11,80", "13,40", 6), ("11,80", "13,50", 5), ("11,80", "10,50", 12.000128333333333), ("11,80", "10,30", 10.000083333333333), ("11,80", "10,20", 9.00005), ("11,80", "11,30", 5), ("11,80", "11,40", 4), ("11,80", "11,60", 2), ("11,80", "11,80", 0),
    ]
    # fmt:on

    g = Graph()
    for edge in edges:
        g.add_edge(*edge)
    sp, p = g.solve_tsp()
    assert 182.00 < sp < 182.002
    assert len(p) == len(g.nodes())
    assert p == [
        "22,30",
        "23,70",
        "23,60",
        "23,40",
        "26,70",
        "26,80",
        "25,80",
        "24,80",
        "12,80",
        "11,80",
        "13,50",
        "10,20",
        "10,30",
        "11,30",
        "12,20",
        "12,40",
        "11,40",
        "12,30",
        "11,60",
        "12,60",
        "12,70",
        "13,40",
        "13,20",
        "10,50",
        "0,0",
        "24,70",
        "22,20",
    ]


def test_cyclic_condition():
    """
    Below is a fully connected graph for this setup

    Lane 9 <--- locations: 60 & 70  <--- Lane 9 end
    ^                                        ^
    |                                        |
    v                                        v
    Lane 10 ---> locations: 20...70 ---> Lane 10 end
    ^                                        ^
    |                                        |
    v                                        v
    Lane 11 <--- locations 20...50 <--- Lane 11 end
    """
    # fmt:off
    g = Graph(
        from_dict={
            "10,20": {"10,20":  0, "10,30":  1, "10,40":  2, "10,50":  3, "11,30": 14, "18,30": 27, "11,50": 12, "11,40": 13, "11,20": 15, "10,60":  4, "10,70":  5, "9,70": 10, "9,60": 11},
            "10,30": {"10,20": 19, "10,30":  0, "10,40":  1, "10,50":  2, "11,30": 13, "18,30": 26, "11,50": 11, "11,40": 12, "11,20": 14, "10,60":  3, "10,70":  4, "9,70":  9, "9,60": 10},
            "10,40": {"10,20": 18, "10,30": 19, "10,40":  0, "10,50":  1, "11,30": 12, "18,30": 25, "11,50": 10, "11,40": 11, "11,20": 13, "10,60":  2, "10,70":  3, "9,70":  8, "9,60":  9},
            "10,50": {"10,20": 17, "10,30": 18, "10,40": 19, "10,50":  0, "11,30": 11, "18,30": 24, "11,50":  9, "11,40": 10, "11,20": 12, "10,60":  1, "10,70":  2, "9,70":  7, "9,60":  8},
            "11,30": {"10,20":  6, "10,30":  7, "10,40":  8, "10,50":  9, "11,30":  0, "18,30": 13, "11,50": 18, "11,40": 19, "11,20":  1, "10,60": 10, "10,70": 11, "9,70": 16, "9,60": 17},
            "18,30": {"10,20": 25, "10,30": 26, "10,40": 27, "10,50": 28, "11,30": 19, "18,30":  0, "11,50": 17, "11,40": 18, "11,20": 20, "10,60": 29, "10,70": 30, "9,70": 17, "9,60": 18},
            "11,50": {"10,20":  8, "10,30":  9, "10,40": 10, "10,50": 11, "11,30":  2, "18,30": 15, "11,50":  0, "11,40":  1, "11,20":  3, "10,60": 12, "10,70": 13, "9,70": 18, "9,60": 19},
            "11,40": {"10,20":  7, "10,30":  8, "10,40":  9, "10,50": 10, "11,30":  1, "18,30": 14, "11,50": 19, "11,40":  0, "11,20":  2, "10,60": 11, "10,70": 12, "9,70": 17, "9,60": 18},
            "11,20": {"10,20":  5, "10,30":  6, "10,40":  7, "10,50":  8, "11,30": 19, "18,30": 12, "11,50": 17, "11,40": 18, "11,20":  0, "10,60":  9, "10,70": 10, "9,70": 15, "9,60": 16},
            "10,60": {"10,20": 16, "10,30": 17, "10,40": 18, "10,50": 19, "11,30": 10, "18,30": 23, "11,50":  8, "11,40":  9, "11,20": 11, "10,60":  0, "10,70":  1, "9,70":  6, "9,60":  7},
            "10,70": {"10,20": 15, "10,30": 16, "10,40": 17, "10,50": 18, "11,30":  9, "18,30": 22, "11,50":  7, "11,40":  8, "11,20": 10, "10,60": 19, "10,70":  0, "9,70":  5, "9,60":  6},
             "9,70": {"10,20": 10, "10,30": 11, "10,40": 12, "10,50": 13, "11,30": 24, "18,30": 19, "11,50": 22, "11,40": 23, "11,20": 25, "10,60": 14, "10,70": 15, "9,70":  0, "9,60":  1},
             "9,60": {"10,20":  9, "10,30": 10, "10,40": 11, "10,50": 12, "11,30": 23, "18,30": 18, "11,50": 21, "11,40": 22, "11,20": 24, "10,60": 13, "10,70": 14, "9,70": 19, "9,60":  0},
        }
    )
    
    def exhaustive(g):
        # from tqdm import tqdm

        # def permutations(n, k):
        #     return math.factorial(n) / math.factorial(n - k)

        # p2, d2 = [], 999_999_999
        # nodes = g.nodes()
        # perms = permutations(len(nodes), len(nodes))

        # for route in tqdm(itertools.permutations(nodes, len(nodes)), total=perms):
        #     route += (route[0],)
        #     d = g.distance_from_path(route)
        #     if d < d2:
        #         d2 = d
        #         p2 = route[:-1]
    
        # d2,p2 = exhaustive() this takes 6 hours to run, so here are the precomputed results:
        p2 = ("10,20", "10,30", "10,40", "10,50", "10,60", "10,70", "11,50", "11,40", "11,30", "11,20", "18,30", "9,70", "9,60")
        d2 = 54
        return d2, p2

    # fmt:on

    d2, p2 = exhaustive(g)
    d1, p1 = g.solve_tsp()
    """
    Running TSP leads to the following oscillation 

                                                            V        V        V        V
    ['9,70', '9,60', '10,20', '10,30', '10,40', '10,50', '11,30', '18,30', '11,50', '11,40', '11,20', '10,60', '10,70']
    ['9,70', '9,60', '10,20', '10,30', '10,40', '10,50', '11,40', '11,30', '18,30', '11,50', '11,20', '10,60', '10,70']
    ['9,70', '9,60', '10,20', '10,30', '10,40', '10,50', '11,30', '18,30', '11,50', '11,40', '11,20', '10,60', '10,70']
    ['9,70', '9,60', '10,20', '10,30', '10,40', '10,50', '11,40', '11,30', '18,30', '11,50', '11,20', '10,60', '10,70']
    ['9,70', '9,60', '10,20', '10,30', '10,40', '10,50', '11,30', '18,30', '11,50', '11,40', '11,20', '10,60', '10,70']
    ['9,70', '9,60', '10,20', '10,30', '10,40', '10,50', '11,40', '11,30', '18,30', '11,50', '11,20', '10,60', '10,70']
    ['9,70', '9,60', '10,20', '10,30', '10,40', '10,50', '11,30', '18,30', '11,50', '11,40', '11,20', '10,60', '10,70']
    ['9,70', '9,60', '10,20', '10,30', '10,40', '10,50', '11,40', '11,30', '18,30', '11,50', '11,20', '10,60', '10,70']
    ['9,70', '9,60', '10,20', '10,30', '10,40', '10,50', '11,30', '18,30', '11,50', '11,40', '11,20', '10,60', '10,70']
    ['9,70', '9,60', '10,20', '10,30', '10,40', '10,50', '11,40', '11,30', '18,30', '11,50', '11,20', '10,60', '10,70']
    ['9,70', '9,60', '10,20', '10,30', '10,40', '10,50', '11,30', '18,30', '11,50', '11,40', '11,20', '10,60', '10,70']
    ['9,70', '9,60', '10,20', '10,30', '10,40', '10,50', '11,40', '11,30', '18,30', '11,50', '11,20', '10,60', '10,70']
    ['9,70', '9,60', '10,20', '10,30', '10,40', '10,50', '11,30', '18,30', '11,50', '11,40', '11,20', '10,60', '10,70']
    """

    assert d1 == d2
    assert p1 == p2
